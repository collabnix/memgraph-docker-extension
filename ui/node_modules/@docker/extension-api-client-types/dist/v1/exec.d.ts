/// <reference types="node" />
export interface ExecOptions {
    cwd?: string;
    env?: NodeJS.ProcessEnv;
}
export interface SpawnOptions extends ExecOptions {
    stream: ExecStreamOptions;
}
export interface Exec {
    /**
     * Executes a command.
     *
     * @param cmd The command to execute.
     * @param args The arguments of the command to execute.
     * @param options The list of options.
     * @returns A promise that will resolve once the command finishes.
     */
    (cmd: string, args: string[], options?: ExecOptions): Promise<ExecResult>;
    /**
     * Streams the result of a command if `stream` is specified in the `options` parameter.
     *
     * Specify the `stream` if the output of your command is too long or if you need to stream things indefinitely (for example container logs).
     *
     * @param cmd The command to execute.
     * @param args The arguments of the command to execute.
     * @param options The list of options.
     * @returns The spawned process.
     */
    (cmd: string, args: string[], options: SpawnOptions): ExecProcess;
}
export interface ExecProcess {
    /**
     * Close the process started by exec(streamingOptions)
     */
    close(): void;
}
export interface ExecStreamOptions {
    /**
     * Invoked when receiving output from command execution.
     * By default, the output is split into chunks at arbitrary boundaries.
     * If you prefer the output to be split into complete lines, set `splitOutputLines`
     * to true. The callback is then invoked once for each line.
     * @param data output content. Can include either stdout string, or stderr string, one at a time.
     */
    onOutput?: (data: {
        stdout: string;
        stderr?: undefined;
    } | {
        stdout?: undefined;
        stderr: string;
    }) => void;
    /**
     * Invoked to report error if the executed command errors.
     * @param error the error happening in the executed command
     */
    onError?: (error: any) => void;
    /**
     * Invoked when process exits.
     * @param exitCode the process exit code
     */
    onClose?: (exitCode: number) => void;
    /**
     * Specifies the behaviour invoking `onOutput(data)`. Raw output by default, splitting output at any position. If set to true, `onOutput` will be invoked once for each line.
     */
    readonly splitOutputLines?: boolean;
}
export interface ExecResult extends RawExecResult {
    /**
     * Split output lines.
     * @returns The list of lines.
     */
    lines(): string[];
    /**
     * Parse each output line as a JSON object.
     * @returns The list of lines where each line is a JSON object.
     */
    parseJsonLines(): any[];
    /**
     * Parse a well-formed JSON output.
     * @returns The JSON object.
     */
    parseJsonObject(): any;
}
export interface RawExecResult {
    readonly cmd?: string;
    readonly killed?: boolean;
    readonly signal?: string;
    readonly code?: number;
    readonly stdout: string;
    readonly stderr: string;
}
